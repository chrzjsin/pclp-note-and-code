此部分对 Common Lisp 的一些具体部分进行更加深入的讨论，主题包括：FORMAT 函数，状况系统，特殊操作符，包的使用，以及 LOOP 宏的使用。

1. FORMAT 函数：书中介绍一部分，主要作用是生成可读输出。
	有两个必要参数，一个是输出的地方，一个是格式化参数的字符串。

	第一个参数有四种情况：
		T，是流 *STANDARD-OUTPUT* 的简称，返回 NIL
		一个流，放入流中，返回 NIL
		带填充指针的字符串，放在字符串最后，返回 NIL
		NIL , 会返回生成的字符串
	
	第二个参数由 FORMAT 语言写成，就是带指令的字符串。
		指令包括 ~ ，前置参数，字符
			书中指令可以分为四类：
			a. 例如：(format t "~5$" pi)  打印 3.14159
				~D 十进制整数 前置 : 三位一个逗号，美观打印，@ 正整数
				~O 八进制整数 ~B 二进制整数
				~R 任意进制整数，参数 2~36，不作为进制数打印，就打印为基数词，：序数词，@ 罗马数字
				~F ~E ~G ~$  浮点数
				~A 任何类型，不带引用标记
				~S 任何类型，带上引用标记，可以被读取。
				~C 字符
				~% 换行 ~& 新行 ~~ 波浪线 
			b. 例如：(format t "~[ cero ~; uno ~; dow ~]" 0) 打印cero
				~[ 与 ~] 组合使用，~; 分隔，如果没有选择，则使用 ~:; 默认打印
			c. 例如：(format t "~{~a~^,~}" '(1 2 3)) 打印 "1,2,3"
				~{ 与 ~} 组合使用，在列表上迭代
			d. ~* 在参数里跳跃，具体见书(过于复杂，就像乱码)
      
		指令还有更多，可以做具体研究。

2. Common Lisp 的状况系统
	Common Lisp 的状况系统是其伟大特性之一。与其他语言的异常处理最大的不同，我感觉是再启动，可以在不展开调用栈的情况下处理状况。

	2.1 状况类的定义，使用 DEFINE-CONDITION 定义，默认继承自 CONDITION类，槽只能使用 :initarg 初始化，访问必须使用访问函数。
		例如：(define-condition log-enter-error (error)
				((text :initarg :text :reader text)))

	2.2 ERROR 函数初始化，抛出状况
		上例：(error 'log-enter-error :text text)

	2.3 HANDLER-CASE 状况处理器，当底层函数没有抛出状况，就返回其值，捕获状况，进入处理
		上例：(handler-case (pare-log-enter text) 
				(log-enter-error () nil))
		捕获状况，返回 NIL ，相当于跳过。

	2.4 再启动
		2.4.1 RESTART-CASE 再启动处理器，使用再启动，相当于将处理代码放在中层函数，但由高层函数决定是否处理。
			上例：(restart-case (pare-log-enter text) 
					(skip-log-enter () nil))

		2.4.2 HANDLER-BIND 在高层函数中绑定再启动函数 
			上例：(handler-bind ((log-enter-error #'(lambda (c) (invoke-restart 'skip-log-enter)))))

		2.4.3 INVOKE-RESTART 与 FIND-RESTART 定义再启动函数
			可以定义再启动函数：(defun skip-log-enter (c) 
								(invoke-restart 'skip-log-enter))
			上例：(handler-bind ((log-enter-error #'skip-log-enter(c))))

3. Common Lisp 的 25 个特殊操作符
	QUOTE
	IF
	PROGN
	LET
	LET*
	SETQ
	FLET
	LABELS
	MACROLET
	SYMBOL-MACROLET
	BLOCK
	TAGBODY
	GO
	CATCH
	THROW
	UNWIND-PROTECT
	MULTIPLE-VALUE-CALL
	EVAL-WHEN
	LOCALLY
	LOAD-TIME-VALUE
	PROGV
	return-from
	function
	the
	multiple-value-progl

4. 包与符号

5. LOOP 宏
loop宏是 Common Lisp 里争议比较大的部分。
