第 11，12 ，13 章笔记  集合，列表 ，树

1. Common Lisp 提供将多个值收集到一个对象里的标准数据类型，称为集合类型，一般分为两大类，一类是整数索引的例如：数组，列表，元组；另一类是键值对应的例如：哈希表，关联数组，映射表，字典

2. 向量，就是整数索引集合类型，一维数组，分为定长与变长两类。
	2.1 用 VECTOR 生成特定值的定长向量，例如：(vector 1 2 3) --> #(1 2 3)
	2.2 MAKE-ARRAY 函数构建任意维数组。
		(make-array 5 :initial-element nil) --> #(nil nil nil nil nil)
		(make-array 5 :fill-pointer 0) --> #() ,这是变长向量，fill-pointer 称为填充指针。
		但是想自动拓展，要使用 :adjustable t 
	2.3 VECTOR-PUSH 函数与 VECTOR-POP 函数向尾部添加与弹出值。
	2.4 储存任何对象的向量称为通用向量，但是，可以使用 :element-type 关键字指定类型，例如：
		(make-array 5 :fill-pointer 0 :adjustable t :element-type 'character)   ; 可变长的字符串

3. 列表：构建在点对单元（cons cell）上的数据类型。列表处理也是 Lisp 语言名的来源。
	3.1 点对单元：最基本的数据单元，使用 CONS 函数构建，分成两个部分，前面叫 CAR，后面叫 CDR 。
		一般表示为两个并排的方框，而打印为点分隔，例如：(cons 1 2) -> (1 . 2) , sicp 里翻译为序对。
		(car (cons 1 2)) -> 1 ，结合 SETF 改变值。
		点对单元里可以放入任何对象。
		而列表，就表示为点对单元的链表形式，即 CDR 指向下一个点对单元，最后一个为 NIL
		例如：(cons 1 (cons 2 (cons 3 nil))) -> (1 2 3) ，等价于 (list 1 2 3) 
		而列表操作，使用 FIRST 与 REST ，例如：(first (list 1 2 3)) -> 1 , (rest (list 1 2 3)) -> (2 3)		

	3.2 函数式编程：函数不含任何副作用，计算结果只依赖于参数。与命令式编程相对，可以参考 sicp 的讨论。

	3.3 破坏性操作：包括副作用性与回收性两大类。
		副作用就像 SETF 宏一样，而回收性就更像一种优化，它会回收不用的资源
		APPEND 就是函数式风格，NCONC 是其回收性版本。
		在使用破坏性操作时，注意保存以后会使用的值，列表操作，尽量使用函数式编程。

	3.4 列表处理与映射：
		3.4.1 使用 FIRST 与 REST 就可以返回所有列表元素，但是太长，一般使用从 SECOND 到 TEHTH 的序数词返回对应元素。
			一般的使用 NTH 函数，返回第 n 个元素，n 从 0 开始。例如：(nth 4 '(1 2 3 4 5)) -> 5
		3.4.2 NTHCDR 函数，调用 CDR 函数 n 次。例如：(nthcdr 0 ...) 返回原来的列表，(nthcdr 1 ...) 就等价于 REST 。
		3.4.3 28个复合的 car/cdr 函数
		3.4.4 具体见书 p132 列表处理函数表。
		3.4.5 列表的映射函数，就是将某种操作作用于列表上，例如 MAPCAR 函数，
			(mapcar #'(lamdba (x) (* 2 x)) (list 1 2 3)) -> (2 4 6)
			其他的 MAPLIST 作用于点对单元，MAPCAN 与 MAPCON 是前面两个函数的回收性版本，MAPC 与 MAPL

	3.5 DESTRUCTURING-BIND 宏：作用是解构列表，一般形式是：
		(destructuring-bind (parameter*)
			list body-form*)
		例如：
		(destructuring-bind (x y z) (list 1 2 3)
			(list :x x :y y :z z))
		--> (:X 1 :Y 2 :Z 3)
		还有一个 &whole 的参数，作用是将结果绑定在参数上。

4. 树：就是列表的列表。但是使用时，有几个标准函数适合在树结构上使用
	例如 COPY-TREE 函数，与 COPY-LIST 函数不同在于后者会使用共享的单元，列表的列表部分会共享，而 COPY-TREE 函数会复制全部的点对单元。
	TREE-EQLAL 函数，当树的结构相同，叶子节点相同时就返回 T 。
	SUBST 函数，替换树中元素，例如：(subst 10 1 '(1 2 (3 2 1) ((1 1) (2 2)))) , 会将 1 替换为 10 。
	
5. 集合：使用 ADJOIN 构建集合。例如：
	(defvar *x* ())
	(adjoin 1 *x*)  ;将 1 加入集合。
	PUSHNEW 修改宏，弹出元素。

	其他集合论函数参见书，我也没有具体使用过。

6. 关联表与属性表：alist 与 plist，都属于列表范围。
	6.1 alist 称为关联表，构建于点对单元上，例如：((A . 1) (B . 2) (C . 3)) , 就是一个关联表。
		6.1.2 基本查询函数 ASSOC ，使用键查询，例如：(assoc 'a '((a .1) (b . 2) (c . 3))) -> (A . 1) , 如果只想要值，使用一个 CAR 函数即可。
			而此函数还有 :key :test 关键字改变查询。
		6.1.2 使用 ACONS 函数添加 键值对 ，例如：(acons 'd '4 alist) 
		6.1.3 使用 SETF 与查询函数改变值，使用 PUSH 删除键值对，复制使用 COPY-ALIST 函数。
		6.1.4 使用 PAIRLIS 函数构建 alist ，例如：(pairlis '(a b c) '(1 2 3)) 返回对应的关联表，但顺序无法确定。

	6.2 plist 称为属性表，也是基于点对单元，但是更类似于列表。(:a a :b b :c c)
		基本查询函数 GETF 例如：(getf *plist* :a) , 返回值。结合 SETF 宏改变值。REMF 宏移除项，(remf *plist* :a)
			
7. 序列：序列是向量与列表的抽象类型，就是说，序列函数可以使用在向量与列表上。
	5.1  LENGTH 函数，返回序列长度，例如：(length '(vector 1 2 3)) -> 3
		ELT函数，整数索引访问元素，从 0 开始，例如：(elt '(vector 1 2 3) 0) -> 1，可以结合 SETF 宏改变值
	5.2 序列迭代函数：

	5.3 高阶函数变体：
	
	5.4 对整个序列的操作：（包括复制，排序，合并）

	5.5 对子序列的操作：

	5.6 序列谓词：

	5.7 序列映射函数：

8. 哈希表：键值对表，键相同的含义是 EQL 的相同。
	使用 MAKE-HASH-TABLE 函数构建 hash 表。例如：(defvar *hash* (make-hash-table)) , 空hash表
	基本查询函数 GETHASH ，查找键对应值，例如：(gethash 'foo *hash*) , 结合 SETF 改变值。
	还有一个多重返回值函数，之后详细讨论。
