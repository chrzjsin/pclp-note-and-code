第四章 语法与语义
对 Common Lisp 的基本语法与语义做一些系统化的介绍。

使用大量括号与前缀表达式是 Lisp 与其他语言的最明显的区别。
McCarthy 当年在设计 Lisp 时也考虑过一种类 Algol 语法， 称为 M-表达式 。

Common Lisp 定义了两个黑箱：
1.读取器：将文本转换为 S-表达式 ，读取 S-表达式 。读取器定义了字符串文本如何转换为 S-表达式 。
2.求值器：使用 S-表达式 实现 Lisp 形式的 S-表达式 的语义，求值返回 。求值器定义了一种构建于 S-表达式 上的 Lisp 形式语法 。

概念笔记
1. S-表达式：基本元素是列表（list），与原子（Atom），由列表和原子组成的东西，而只需知道的句法规则就是：如何构成不同原子类型的规则
  1-2. 列表就是括号 。
  1-3. 原子就是除了列表的其他东西 。
  1-4. 常用的原子类型：
    数字：包含数字，数位，前缀，小数点，斜杠，例如：123 1 1.0 246/2 1.0d0 
    字符串：双引号包围着的东西，反斜杠将被转义 。
    名字：由符号对象表示，就是给其命名。规则就是：不能为空，不能包含十个字符（开括号，闭括号，双引号，单引号，反引号，逗号，冒号，分号，反斜杠，竖线）
       名字在转换为符号对象时会改为大写，（Foo，foo，FOO 就是同一个）
       约定：全局变量名开始结尾有 * ，常量开始结尾有 + ，底层函数名前加 % 。
       
2. 作为 Lisp 形式的 S-表达式：
  句法规则：任何原子都是合法的 Lisp 形式，任何以符号为首的列表都是合法 Lisp 形式 。
  2-2 对其求值的规则
  （具体求值操作可以参考 sicp 里的笔记，比较类似）
  1.求值除符号的原子
  2.检查符号，使用不同规则求值
  2-3 三种符号
      1.函数调用形式 function call form
          对函数参数求值，再提取函数体，传递参数求值。
          
      2.特殊符号形式 special form （语法糖衣）
          这是 Common Lisp 语言本身提供的对函数用法的拓展。一共 25 个 ， 只使用其中一小部分
          例如IF，
            (if x (format t "yes") (format t "no"))
          求值第一个表达式，如果为 T ，求值第二个表达式返回，如果是 NIL ，求值第三个表达式返回。
          例如QUOTE，
            (quote (+ 1 2))
          将表达式不求值直接返回，也可以写做：
            '(+ 1 2)
          
      3.宏形式      macro form
          Lisp 宏提供了语言使用者对语言本身的拓展，是一个嵌入编译器的钩子（感觉使用好了，就是魔术一般的手法）
          和函数类似，但是不求值表达式，等对表达式处理完后再求值。
          注意与函数区分。
          
3. 真，假，等价
  NIL 是唯一的假值。
  T 是标准真值。
  
  = 比较数字，char= 比较字符，以此类推。
  
  EQ EQL EQUAL EQUALP 比较 Lisp 对象，相同返回真，越来越宽松

4. 注释与代码格式
  分号表示注释
  约定：
    ；；；；一个文件头，说明主要功能
    ；；；一个段落
    ；；一个函数，宏等
    ；单行注释
    
    
          
