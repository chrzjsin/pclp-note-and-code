第 14 章 文件与 I/O 操作
1. 对文件的操作：
	1.1 读取文件与输入流
		使用 OPEN 函数获得一个输入流，参数是文件名，而需要注意此函数会出错，例如文件不存在等。
		使用 :if-does-not-exist 参数指定 :error :create nil。
		
		与输入流相关的有 READ-CHAR ，READ-LINE，READ 函数，进行读取操作。
		读取一个字符，读取一行，而 READ 函数读取为一个 S-表达式，返回一个 Lisp 对象，与 PRINT 函数配合使用。
		而流使用 CLOSE 函数关闭。

		例如：
			(let ((in (open "G:/pclp-14.txt" :if-does-not-exist nil)))
	   			(when in (loop for line = (read-line in nil)
	      				 while line do (format t "~a~%" line))
	     			(close in)))
		
		而想打开二进制文件，在 OPEN 函数里使用 :element-type 'unsigned-byte 8 参数，使用 READ-BYTE 函数读取，返回 0-255 整数。

		而想批量读取，使用 READ-SEQUENCE 函数，传入一个序列以及一个流，使用流中数据填入序列。		

	1.2 写入文件与输出流
		使用 OPEN 打开一个输出流，加入 :direction :output 参数。
		而 :if-exist 参数有 :supersede :qppend :overwrite , 分别是替换，写到结尾，覆盖。

		类似的，使用 WRITE-CHAR ，WRITE-LINE ，WRITE-STRING 写入输出流。

		而想打开二进制文件，在 OPEN 函数里使用 :element-type 'unsigned-byte 8 参数，使用 WRITE-BYTE 写入。
		
		而想批量写入，使用 WRITE-SEQUENCE 函数，传入一个序列以及一个流，使用序列填入流。
		
	1.3 关闭文件与创建新文件
		文件句柄是很稀缺的资源，所以做完操作需要关闭文件，一般使用 CLOSE 函数。

		但是，实践里一般使用 WITH-OPEN-FILE 宏，读取文件，写入文件，它会自动关闭。
		例如： (with-open-file (stream "..." :direction :output) (format stream "some.txt")) ;创建新文件

2. 路径名抽象：使用一个路径名对象统一不同文件系统文件名的差别
	2.1 路径名对象，通过六个组件确定。
		host 主机
		device 设备
		directory 目录
		name 名称
		type 类型
		version 版本
		
		其中，目录里使用两个关键字 :absolute :relative ，意思是绝对路径与相对路径

		PATHNAME 函数，读取文件名字符串，返回路径名对象，(pathname "some/file.txt") -> #p"some/file.txt"
		PATHNAME-NAME 返回名字,其他类似。
		从对象到字符串则使用 NAMESTRING 函数，例如 DIRECTORY-NAMESTRING，返回目录字符串。

2.2 构建路径名对象：MAKE-PATHAME 函数，例如：
		(make-pathname
	 	 :directory '(:absolute "foo" "baz")
	 	 :name "baz"
		 :type "txt")
		->#P"/foo/baz/baz.txt"

		而为了保持健壮性，我们应该让用户输入路径，所以一般写成
			(make-pathname :type "html" :defaults input-file)
		创建.html文件，其中 input-file 是用户输入的字符串。
		而使用相对路径，则写为：
			(make-pathname :directory '(:relative "program") :defaults input-file)
		
		使用 MERGE-PATHNAMES 函数，合并两个路径名
			(merge-pathnames #p"www/a.txt" #p"/foo/")
			-> #P"/foo/www/a.txt"

		反之，使用 ENOUGH-NAMESTRING 函数，拆分出路径：
			(enough-namestring #p"/foo/www/a.txt" #p"/foo/")
			-> "www/a.txt"
		组合使用两个函数，可以是构造出绝对路径不同，但是相对路径相同的路径：			

	2.3 目录名与文件名的区别
		区分使用目录名与文件名，例如：
			(make-pathname :directory  '(:absolute "foo") :name "baz") ;文件->#P"/foo/baz"
			(make-pathname :directory '(:absolute "foo" "baz"))        ;目录 ->#P"/foo/baz/"
			
3. 与文件系统交互：还有一些操作的函数，例如：
		测试文件存在的标准函数：PROBE-FILE
		删除文件，DELETE-FILE 函数
		重命名，RENAME-FILE
		返回上次使用的时间：FILE-WRITE-DATE
		文件长度，以流为参数：FILE-LENGTH
		而其他功能函数，在 15 章改进。

4. 其他 I/O
	4.1 STRING-STREAM 
	4.2 简单了解几种流
		输出流：BROADCAST-STREAM
		输入流：CONCATENATED-STREAM
		双向流：TWO-WAY-STREAM
		以及 ECHO-STREAM 
		
		其实，Common Lisp 里，缺少允许用户自定义流的库，更多信息参考书。

第 15 章 实践 可移植路径名库

1. 包含的基本操作有获取目录中的文件列表，检测文件与路径是否存在，以及一个递归遍历目录的函数
	获取目录的标准函数是 DIRECTORY ，例如：
	(directory (make-pathname :name :wild :type :wild :defaults "G:/pclp-14-test/"))
	测试文件存在的标准函数是 PROBE-FILE ，例如：
	(probe-file #p"G:/pclp-14-test.txt")
	
2. 但是不同 Common Lisp 实现里，这些函数会有不同的行为。
	我们想写一个可移植的库，就要使用一种称为读取期条件化的手法。
	具体说就是使用两个语法标记，#+ 和 #- ，以及特性表达式，获得不同实现之间的统一。例如库中函数 list-directory 。

3. 具体实现见代码 pclp-15.lisp ，里面有许多处理路径名的函数。
